name: Docker Build and Push

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: acquisitions-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Validate Docker credentials
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "::error::DOCKER_USERNAME secret is not set"
            echo "::notice::Please add DOCKER_USERNAME secret to your repository settings"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "::error::DOCKER_PASSWORD secret is not set"
            echo "::notice::Please add DOCKER_PASSWORD secret to your repository settings"
            exit 1
          fi

          # Check for whitespace issues in username
          USERNAME_RAW="${{ secrets.DOCKER_USERNAME }}"
          USERNAME_CLEAN=$(echo "${USERNAME_RAW}" | tr -d '\n\r\t ' | xargs)
          USERNAME_LENGTH=${#USERNAME_RAW}
          USERNAME_CLEAN_LENGTH=${#USERNAME_CLEAN}

          echo "Raw username length: ${USERNAME_LENGTH}"
          echo "Clean username length: ${USERNAME_CLEAN_LENGTH}"

          if [ "${USERNAME_LENGTH}" -ne "${USERNAME_CLEAN_LENGTH}" ]; then
            echo "::warning::Docker username contains whitespace characters that will be trimmed"
            echo "::notice::Consider updating your DOCKER_USERNAME secret to remove extra whitespace"
          fi

          echo "Docker credentials are properly configured"

      - name: Set image name
        id: image
        run: |
          # Trim whitespace from username and build image name
          DOCKER_USER=$(echo "${{ secrets.DOCKER_USERNAME }}" | tr -d '\n\r\t ' | xargs)
          IMAGE_FULL_NAME="${{ env.REGISTRY }}/${DOCKER_USER}/${{ env.IMAGE_NAME }}"
          echo "image_name=${IMAGE_FULL_NAME}" >> $GITHUB_OUTPUT
          echo "::notice::Building image: ${IMAGE_FULL_NAME}"
          echo "::notice::Docker username (trimmed): '${DOCKER_USER}'"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image.outputs.image_name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=prod-{{date 'YYYYMMDD-HHmmss' tz='UTC'}},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Acquisitions API
            org.opencontainers.image.description=Modern Express.js API with Neon PostgreSQL and Arcjet security
            org.opencontainers.image.vendor=Acquisitions Team
            org.opencontainers.image.licenses=ISC

      - name: Debug metadata output
        run: |
          echo "::group::Generated Tags and Labels"
          echo "Tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "Labels:"
          echo "${{ steps.meta.outputs.labels }}"
          echo "::endgroup::"

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Generate build summary
        run: |
          echo "## 🐳 Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: \`${{ steps.image.outputs.image_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: \`linux/amd64\`, \`linux/arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Published Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Deployment Commands" >> $GITHUB_STEP_SUMMARY
          echo "Pull and run the latest image:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.image.outputs.image_name }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 3000:3000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  --env-file .env.production \\" >> $GITHUB_STEP_SUMMARY
          echo "  --name acquisitions-api \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ steps.image.outputs.image_name }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Using Docker Compose" >> $GITHUB_STEP_SUMMARY
          echo "Update your \`docker-compose.prod.yml\` to use the new image:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
          echo "services:" >> $GITHUB_STEP_SUMMARY
          echo "  app:" >> $GITHUB_STEP_SUMMARY
          echo "    image: ${{ steps.image.outputs.image_name }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Docker Hub link
        run: |
          echo "::notice::✅ Image successfully pushed to Docker Hub"
          echo "::notice::🔗 View on Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
          echo "::notice::📦 Pull command: docker pull ${{ steps.image.outputs.image_name }}:latest"
